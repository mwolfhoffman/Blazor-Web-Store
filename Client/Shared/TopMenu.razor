@inject ISyncLocalStorageService localStorage
@inject ICartService cartService
@inject IProductService productService
@inject NavigationManager navMan
@implements IDisposable 

<BlazoredTypeahead SearchMethod="@SearchProducts"
    TValue="Product"
    TItem="Product"
    Value="selectedProduct"
    ValueChanged="HandleSearch" 
    ValueExpression="@(() => selectedProduct)"
    placeholder="Search Products..."
>
    <SelectedTemplate>
        @context.Title
    </SelectedTemplate>
    <ResultTemplate>
        @context.Title
    </ResultTemplate>
    <NotFoundTemplate>
        Sorry, there were no products found. 
    </NotFoundTemplate>
</BlazoredTypeahead>

<a href="cart" class="btn btn-info">
    <i class="oi oi-cart"></i>
    Cart
    <span class="badge badge-pill badge-light">@GetProductCount()</span>
</a>

@code {

    Product selectedProduct; 
    protected override void OnInitialized()
    {
        cartService.OnChange += StateHasChanged;
    }

    private int GetProductCount()
    {
        var cart = localStorage.GetItem<List<ProductVariant>>("cart");
        return cart != null ? cart.Count : 0;

    }

    public void Dispose()
    {
            cartService.OnChange -= StateHasChanged;
    }

    private async Task<IEnumerable<Product>> SearchProducts(string searchText)
        {
            var response = await productService.SearchProducts(searchText);
            return response;
        }

    private void HandleSearch(Product product)
    {
        if(product == null ){
            return;
        }
    selectedProduct = product;
    navMan.NavigateTo($"product/{selectedProduct.Id}");

    }
}

